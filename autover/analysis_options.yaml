# This file configures the analyzer, which statically analyzes Dart code to
# check for errors, warnings, and lints.
#
# The issues identified by the analyzer are surfaced in the UI of Dart-enabled
# IDEs (https://dart.dev/tools#ides-and-editors). The analyzer can also be
# invoked from the command line by running `flutter analyze`.

# The following line activates a set of recommended lints for Flutter apps,
# packages, and plugins designed to encourage good coding practices.
#include: package:very_good_analysis/analysis_options.yaml
analyzer:
#  plugins:
#    - dart_code_metrics
  enable-experiment:
    - records
    - patterns
  exclude:
    - lib/**/**.config.dart
    - lib/**/**.g.dart
    - lib/**/**.freezed.dart
    - test/**
  errors:
    invalid_annotation_target: ignore
dart_code_metrics:
  anti-patterns:
    - long-method
    - long-parameter-list
  metrics:
    # Function
    cyclomatic-complexity: 5
    maximum-nesting-level: 5
    number-of-parameters: 4
    source-lines-of-code: 40
    lines-of-code: 100
    # Class
    weight-of-class: 0.33
    # Tech debt
    technical-debt:
      threshold: 1
      todo-cost: 24
      ignore-cost: 8
      ignore-for-file-cost: 24
      as-dynamic-cost: 16
      deprecated-annotations-cost: 24
      file-nullsafety-migration-cost: 16
      unit-type: "hours"
  rules:
    # Dart
    - avoid-nested-conditional-expressions:
        severity: warning
        acceptable-level: 2
    - avoid-non-null-assertion:
        severity: warning
    - avoid-missing-enum-constant-in-map:
        severity: warning
    - avoid-unnecessary-type-assertions:
        severity: warning
    - avoid-unnecessary-type-assertions:
        severity: warning
    - avoid-unnecessary-type-casts:
        severity: warning
    - avoid-unrelated-type-assertions:
        severity: warning
    - avoid-unused-parameters:
        severity: warning
    - binary-expression-operand-order:
        severity: warning
    - no-boolean-literal-compare:
        severity: warning
    - no-equal-arguments:
        severity: warning
    - no-equal-then-else:
        severity: warning
    - no-empty-block:
        severity: warning
    - no-object-declaration:
        severity: warning
    - prefer-first:
        severity: warning
    - prefer-async-await:
        severity: warning
    - prefer-last:
        severity: warning
    - prefer-trailing-comma:
        severity: warning
    - prefer-match-file-name:
        severity: warning
    # Flutter
    - always-remove-listener:
        severity: warning
    - avoid-unnecessary-setstate:
        severity: warning   
linter:
  # The lint rules applied to this project can be customized in the
  # section below to disable rules from the `package:flutter_lints/flutter.yaml`
  # included above or to enable additional rules. A list of all available lints
  # and their documentation is published at
  # https://dart-lang.github.io/linter/lints/index.html.
  #
  # Instead of disabling a lint rule for the entire project in the
  # section below, it can also be suppressed for a single line of code
  # or a specific dart file by using the `// ignore: name_of_lint` and
  # `// ignore_for_file: name_of_lint` syntax on the line or in the file
  # producing the lint.
  rules:
    # avoid_print: false  # Uncomment to disable the `avoid_print` rule
    # prefer_single_quotes: true  # Uncomment to enable the `prefer_single_quotes` rule

# Additional information about this file can be found at
# https://dart.dev/guides/language/analysis-options